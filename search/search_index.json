{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"introduction","text":""},{"location":"#welcome-to-fleex","title":"Welcome to Fleex","text":"<p>Welcome to Fleex - Empowering Distributed Computing!</p> <p>Fleex is a cutting-edge tool designed to revolutionize distributed computing. Originally crafted for the dynamic realms of penetration testing and bug bounty hunting, Fleex now offers a versatile platform for executing a wide range of commands across multiple virtual private servers (VPS) with unparalleled ease and efficiency.</p> <p>Key Features:</p> <ul> <li> <p>Multi-Cloud Integration: Seamlessly interact with various cloud providers to create, manage, and remove VPS instances effortlessly.</p> </li> <li> <p>YAML-Powered Scans: Conduct lightning-fast internet scans utilizing modules specified in YAML configurations with the powerful scan command.</p> </li> <li> <p>Concurrent Command Execution: Execute individual commands simultaneously across numerous VPS units using the potent run command.</p> </li> <li> <p>Instantaneous SSH Access: Effortlessly connect to a specific machine with automatic SSH functionality by simply providing its designated name.</p> </li> </ul> <p>Discover new possibilities in distributed computing with Fleex. Whether you're a seasoned security researcher or a budding bug bounty hunter, Fleex empowers you to achieve unprecedented results with speed and precision.</p>"},{"location":"#supported-providers","title":"Supported providers","text":"<p>We currently support the following providers:</p> <ul> <li>Linode</li> </ul> <p>Stay tuned for future updates as we expand our list of supported cloud providers to further enhance your Fleex experience. For now, dive into the world of distributed computing with the reliability of Linode and more to come!</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#main-contributors","title":"Main contributors","text":"sw33tLie xm1k3"},{"location":"credits/#sponsors","title":"Sponsors","text":"ProjectDiscovery bsysop"},{"location":"releases/","title":"Releases","text":""},{"location":"releases/#fleex-v210","title":"Fleex v2.1.0","text":"<p>What's Changed</p> <ul> <li>Init command ssh keypair by @xm1k3 in https://github.com/FleexSecurity/fleex/pull/45</li> <li>Space on init command ssh pub key creation by @xm1k3 in https://github.com/FleexSecurity/fleex/pull/48</li> <li>Better scp command by @xm1k3 in https://github.com/FleexSecurity/fleex/pull/49</li> <li>run command by @xm1k3 in https://github.com/FleexSecurity/fleex/pull/50</li> <li>Fixes on linode cloud provider by @xm1k3 in https://github.com/FleexSecurity/fleex/pull/51</li> <li>Scan command by @xm1k3 in https://github.com/FleexSecurity/fleex/pull/55</li> </ul> <p>Full Changelog: https://github.com/FleexSecurity/fleex/compare/v2.0...v2.1.0</p>"},{"location":"releases/#fleex-v20","title":"Fleex v2.0","text":"<p>What's Changed</p> <ul> <li>Update scp.go by @pradeepch99 in https://github.com/FleexSecurity/fleex/pull/16</li> <li>Add vultr by @pradeepch99 in https://github.com/FleexSecurity/fleex/pull/17</li> <li>vultr integration by @xm1k3 in https://github.com/FleexSecurity/fleex/pull/18</li> <li>Code refactor providers by @xm1k3 in https://github.com/FleexSecurity/fleex/pull/23</li> <li>replaced go get with go install by @remonsec in https://github.com/FleexSecurity/fleex/pull/26</li> <li>Update README.md by @b1bek in https://github.com/FleexSecurity/fleex/pull/31</li> <li>imp: packer implementation by @xm1k3 in https://github.com/FleexSecurity/fleex/pull/32</li> <li>remove image function by @xm1k3 in https://github.com/FleexSecurity/fleex/pull/33</li> <li>code refactoring linode by @xm1k3 in https://github.com/FleexSecurity/fleex/pull/35</li> <li>remove viper refs and replace with json config by @xm1k3 in https://github.com/FleexSecurity/fleex/pull/36</li> <li>New Features related to custom-vps &amp;&amp; Fixes by @xm1k3 in https://github.com/FleexSecurity/fleex/pull/38</li> <li>added release ci by @xm1k3 in https://github.com/FleexSecurity/fleex/pull/41</li> <li>ssh logic also with custom vps by @xm1k3 in https://github.com/FleexSecurity/fleex/pull/43</li> </ul> <p>New Contributors</p> <ul> <li>@pradeepch99 made their first contribution in https://github.com/FleexSecurity/fleex/pull/16</li> <li>@remonsec made their first contribution in https://github.com/FleexSecurity/fleex/pull/26</li> <li>@b1bek made their first contribution in https://github.com/FleexSecurity/fleex/pull/31</li> </ul> <p>Full Changelog: https://github.com/FleexSecurity/fleex/compare/v1.1...v2.0</p>"},{"location":"commands/build/","title":"Build","text":"<p>Fleex takes care of creating a new image if you need one.</p> <p>It will install tools that are usually needed by infosec researchers/bug bounty hunters.</p> <p>Warning</p> <p>If you want to edit the tools that will be installed, manually edit the <code>~/fleex/build/common.yaml</code> file before proceeding.</p> <p>Usage:</p> Flag Name Description Default <code>-d</code> <code>--delete</code> Delete box after image creation <code>-f</code> <code>--file</code> Build file ~/fleex/build/common.yaml <code>-p</code> <code>--provider</code> Service provider (Supported: linode, digitalocean) <code>-R</code> <code>--region</code> Region <code>-S</code> <code>--size</code> Size <p>Examples: <pre><code>fleex build\n</code></pre></p> <p>This will take some time, around 20 minutes on average. The good news is that you will only have to do this once for every cloud provider you wish to use.</p> <p>When it's done, run <code>fleex images</code>, get the image id and manually put it into the configuration file, then save it.</p>"},{"location":"commands/delete/","title":"delete","text":"<p>The fleex delete command empowers you to efficiently remove existing fleets or individual boxes from your provider. This command offers flexibility in managing your resources. Usage:</p> <pre><code>Delete an existing fleet or even a single box\n\nUsage:\nfleex delete [flags]\n\nFlags:\n-h, --help              help for delete\n-n, --name string       Fleet name. Boxes will be named [name]-[number] (default \"pwn\")\n-p, --provider string   Service provider\n\nGlobal Flags:\n    --config string     config file\n-l, --loglevel string   Set log level. Available: debug, info, warn, error, fatal (default \"info\")\n    --proxy string      HTTP Proxy (Useful for debugging. Example: http://127.0.0.1:8080)\n</code></pre> <p>Examples: <pre><code>fleex delete\n</code></pre> Or <pre><code>fleex delete -p PROVIDER-NAME -n FLEET-NAME\n</code></pre></p> <p>Note</p> <p>You can delete the vps individually by entering the full name</p>"},{"location":"commands/images/","title":"images","text":"<p>This command allows you to see all the images you have generated from a provider </p> <p>Usage:</p> <pre><code>List available images\n\nUsage:\n  fleex images ls [flags]\n\nFlags:\n  -h, --help              help for ls\n  -p, --provider string   Service provider\n\nGlobal Flags:\n      --config string     config file\n  -l, --loglevel string   Set log level. Available: debug, info, warn, error, fatal (default \"info\")\n      --proxy string      HTTP Proxy (Useful for debugging. Example: http://127.0.0.1:8080)\n</code></pre> <p>Examples: <pre><code>fleex images ls\n</code></pre> Or <pre><code>fleex images ls -p PROVIDER-NAME\n</code></pre></p> <p>Result: <pre><code>&lt;ID&gt;     &lt;NAME&gt;                 &lt;STATUS&gt;  &lt;SIZE (GB)&gt;\n12345678 Fleex-build-1624990254 available 10.52\n23456789 Fleex-build-1624994814 available 5.42\n34567890 Fleex-build-1625839588 available 5.86\n</code></pre></p> <p>Warning</p> <p>The displayed data is for example only</p>"},{"location":"commands/init/","title":"init","text":"<p>The <code>fleex init</code> command is your gateway to an effortless setup process. Use this command for the initial configuration, which automates the generation of SSH keys for seamless authentication with your machines. Additionally, it downloads a default JSON config file, ready for your customization with essential tokens and cloud provider details.</p> <p>Usage:</p> <pre><code>Fleex initialization command. Run this the first time.\n\nUsage:\n  fleex init [flags]\n\nFlags:\n  -e, --email string   Email for the ssh key pair creation\n  -h, --help           help for init\n  -o, --overwrite      If the fleex folder exists overwrite it\n  -u, --url string     Config folder url\n\nGlobal Flags:\n      --config string     config file\n  -l, --loglevel string   Set log level. Available: debug, info, warn, error, fatal (default \"info\")\n      --proxy string      HTTP Proxy (Useful for debugging. Example: http://127.0.0.1:8080)\n</code></pre> <p>Warning</p> <p>Fleex will initialize all configuration files in <code>$HOME/.config/fleex/</code></p> <p>Examples: <pre><code>fleex init\n</code></pre></p> <p>Output:</p> <pre><code>INFO[0002] Fleex initialized successfully, see $HOME/.config/fleex \n</code></pre>"},{"location":"commands/ls/","title":"ls","text":"<p>This command allows you to see all the VPS you have generated from a provider </p> <p>Usage:</p> <pre><code>List running boxes\n\nUsage:\n  fleex ls [flags]\n\nFlags:\n  -h, --help              help for ls\n  -p, --provider string   Service provider (Supported: linode)\n\nGlobal Flags:\n      --config string     config file\n  -l, --loglevel string   Set log level. Available: debug, info, warn, error, fatal (default \"info\")\n      --proxy string      HTTP Proxy (Useful for debugging. Example: http://127.0.0.1:8080)\n</code></pre> <p>Examples: <pre><code>fleex ls\n</code></pre> Or <pre><code>fleex ls -p PROVIDER-NAME\n</code></pre></p> <p>Result: <pre><code>&lt;ID&gt;      &lt;NAME&gt; &lt;STATUS&gt; &lt;IP&gt;\n123456789 pwn-1  active   192.168.1.1\n123456789 pwn-2  active   192.168.1.2\n123456789 pwn-4  active   192.168.1.3\n</code></pre></p> <p>Warning</p> <p>The displayed data is for example only</p>"},{"location":"commands/run/","title":"run","text":"<p>The fleex run command empowers you to send commands to a fleet of spawned machines, enabling seamless remote execution of tasks. However, please ensure that you have previously generated VPS using <code>fleex spawn</code> before utilizing this command.</p> <p>Usage:</p> <pre><code>Send a command to a fleet\n\nUsage:\n  fleex run [flags]\n\nFlags:\n  -c, --command string    Command to send\n  -h, --help              help for run\n  -n, --name string       Fleet name (default \"pwn\")\n  -p, --port int          SSH port (default -1)\n  -P, --provider string   Service provider\n  -U, --username string   SSH username\n\nGlobal Flags:\n      --config string     config file\n  -l, --loglevel string   Set log level. Available: debug, info, warn, error, fatal (default \"info\")\n      --proxy string      HTTP Proxy (Useful for debugging. Example: http://127.0.0.1:8080)\n</code></pre> <p>Warning</p> <p>for this example 2 vps were used</p> <p>Examples:</p> <p>Remote ls -la <pre><code>fleex run -c \"ls -la\"\n</code></pre> Or <pre><code>fleex run -c \"ls -la\" --port 22 -U root\n</code></pre> Result: <pre><code>total 28\ndrwx------  5 root root 4096 Jul 12 19:13 .\ndrwxr-xr-x 19 root root 4096 Jul 12 19:11 ..\n-rw-r--r--  1 root root 3106 Dec  5  2019 .bashrc\ndrwx------  2 root root 4096 Jul 12 19:13 .cache\n-rw-r--r--  1 root root    0 Jul 12 19:11 .cloud-locale-test.skip\n-rw-r--r--  1 root root  161 Dec  5  2019 .profile\ndrwx------  2 root root 4096 Jul 12 19:11 .ssh\ndrwxr-xr-x  3 root root 4096 Jul 12 19:11 snap\ntotal 28\ndrwx------  5 root root 4096 Jul 12 19:13 .\ndrwxr-xr-x 19 root root 4096 Jul 12 19:12 ..\n-rw-r--r--  1 root root 3106 Dec  5  2019 .bashrc\ndrwx------  2 root root 4096 Jul 12 19:13 .cache\n-rw-r--r--  1 root root    0 Jul 12 19:12 .cloud-locale-test.skip\n-rw-r--r--  1 root root  161 Dec  5  2019 .profile\ndrwx------  2 root root 4096 Jul 12 19:12 .ssh\ndrwxr-xr-x  3 root root 4096 Jul 12 19:12 snap\n</code></pre></p> <p>Remote whoami <pre><code>fleex run -c \"whoami\"\n</code></pre> Or <pre><code>fleex run -c \"whoami\" --port 22 -U root\n</code></pre> Result:</p> <pre><code>root\nroot\n</code></pre>"},{"location":"commands/scan/","title":"scan","text":"<p>Warning</p> <p>Still in WIP, some things on this page may be subject to change</p> <p>This command allows you to running distributed commands among all the vps you have generated.  However, please ensure that you have previously generated VPS using <code>fleex spawn</code> before utilizing this command.</p> <p>Usage:</p> <pre><code>Send a command to a fleet, but also with files upload &amp; chunks splitting\n\nUsage:\n  fleex scan [flags]\n\nFlags:\n      --chunks-folder string   Output folder containing output chunks. If empty it will use /tmp/&lt;unix_timestamp&gt;\n  -c, --command string         Command to send. Supports {{INPUT}} and {{OUTPUT}}\n  -d, --delete                 Delete boxes as soon as they finish their job\n  -h, --help                   help for scan\n  -i, --input string           Input file\n      --module string          Specify path to a YAML module file\n  -n, --name string            Fleet name (default \"pwn\")\n  -o, --output string          Output file path. Made from concatenating all output chunks from all boxes\n      --params strings         Set parameters in the format KEY:VALUE\n  -P, --password string        SSH password\n      --port int               SSH port (default -1)\n  -p, --provider string        VPS provider\n  -U, --username string        SSH username\n\nGlobal Flags:\n      --config string     config file\n  -l, --loglevel string   Set log level. Available: debug, info, warn, error, fatal (default \"info\")\n      --proxy string      HTTP Proxy (Useful for debugging. Example: http://127.0.0.1:8080)\n</code></pre> <p>Examples:</p> <pre><code>fleex scan --module module.yaml\n</code></pre> <pre><code>fleex scan --module module.yaml\n  --params INPUT:new_wordlist.txt\n  --params OUTPUT:new_scan_results.txt\n  --params URL:https://example2.com/FUZZ\n</code></pre> <pre><code># module.yaml\n\nname: ffuf-module-test\nauthor: FleexSecurity\ndescription: ffuf module test\n\nvars:\n  INPUT: wordlist.txt\n  OUTPUT: scan-results.txt\n  URL: https://example.com/FUZZ\n\ncommands:\n  - /root/go/bin/ffuf -w {vars.INPUT} -u {vars.URL} -o {vars.OUTPUT} -of csv\n</code></pre> <p>More info about modules also here: fleex-modules</p> <p>This will send the <code>/root/go/bin/ffuf -w wordlist.txt -u https://example.com/FUZZ -o scan-results.txt -of csv</code> command to all the boxes of your <code>pwn</code> fleet.</p> <p>Note</p> <p><code>INPUT</code> and <code>OUTPUT</code> are special labels that gets adjusted accordingly for each box. Fleex will split the input file, in this case <code>/tmp/test-input</code> and send a chunk to each box.</p> <p>Once every box has finished, all output files will be downloaded to your local machine and merged automatically: the final output will be the <code>scan-results.txt</code> file, the name passed to the <code>-o</code> flag.</p>"},{"location":"commands/scp/","title":"scp","text":"<p>This command allows you to send files and folders to the vps you spawned. However, please ensure that you have previously generated VPS using <code>fleex spawn</code> before utilizing this command.</p> <pre><code>Send a file/folder to a fleet using SCP\n\nUsage:\n  fleex scp [flags]\n\nFlags:\n  -d, --destination string   Destination file / folder\n  -h, --help                 help for scp\n  -n, --name string          Fleet name (default \"pwn\")\n      --port int             SSH port (default -1)\n  -p, --provider string      Service provider\n  -s, --source string        Source file / folder\n  -U, --username string      Username\n\nGlobal Flags:\n      --config string     config file\n  -l, --loglevel string   Set log level. Available: debug, info, warn, error, fatal (default \"info\")\n      --proxy string      HTTP Proxy (Useful for debugging. Example: http://127.0.0.1:8080)\n</code></pre> <p>Examples:</p> <p>Send file to /tmp <pre><code>fleex scp -n FLEET-NAME -s ~/something.txt -d /tmp\n</code></pre> Result: <pre><code>INFO[0000] SCP completed, you can find your files in /home/root \n</code></pre></p> <p>Send folder to /tmp <pre><code>fleex scp -n FLEET-NAME -s ~/something/ -d /tmp\n</code></pre> Result: <pre><code>INFO[0000] SCP completed, you can find your files in /home/root \n</code></pre></p>"},{"location":"commands/spawn/","title":"spawn","text":"<p>The fleex spawn command empowers you to dynamically create custom virtual private servers (VPS) on a specific provider. </p> <p>Ensure you have your configuration data set up in <code>$HOME/.config/fleex/config.json</code>. You also have the option to override this data using the available flags.</p> <p>Usage:</p> <pre><code>Spawn a fleet or even a single box\n\nUsage:\n  fleex spawn [flags]\n\nFlags:\n  -c, --count int         How many box to spawn (default 2)\n  -h, --help              help for spawn\n  -I, --image string      Image\n  -n, --name string       Fleet name. Boxes will be named [name]-[number] (default \"pwn\")\n  -p, --provider string   Service provider\n  -R, --region string     Region\n  -S, --size string       Size\n      --skipwait          Skip waiting until all boxes are running\n\nGlobal Flags:\n      --config string     config file\n  -l, --loglevel string   Set log level. Available: debug, info, warn, error, fatal (default \"info\")\n      --proxy string      HTTP Proxy (Useful for debugging. Example: http://127.0.0.1:8080\n</code></pre> <p>To spawn a new fleet (aka, many boxes with starting with fleetname-box_id) run: <pre><code>fleex spawn -n FLEET_NAME -c FLEET_COUNT\n</code></pre> Remember that for any fleex subcommand, you can use the <code>-h</code> flag to get help regarding its usage.</p> <p>Info</p> <p>Fleex will automatically wait until all boxes are ready before exiting.</p>"},{"location":"commands/ssh/","title":"ssh","text":"<p>This command allows you to connect via ssh to a vps you have spawned. However, please ensure that you have previously generated VPS using <code>fleex spawn</code> before utilizing this command.</p> <p>Usage:</p> <pre><code>Start SSH terminal for a box\n\nUsage:\n  fleex ssh [flags]\n\nFlags:\n  -h, --help              help for ssh\n  -n, --name string       Box name (default \"pwn\")\n      --port int          SSH port (default -1)\n  -p, --provider string   Service provider\n  -U, --username string   SSH username\n\nGlobal Flags:\n      --config string     config file\n  -l, --loglevel string   Set log level. Available: debug, info, warn, error, fatal (default \"info\")\n      --proxy string      HTTP Proxy (Useful for debugging. Example: http://127.0.0.1:8080)\n</code></pre> <p>Examples:</p> <p><pre><code>fleex ssh -n pwn-1 --port 22 -U root\n</code></pre> Or <pre><code>fleex ssh -n pwn-1\n</code></pre></p> <p>Result </p> <pre><code>Welcome to Ubuntu 18.04.6 LTS (GNU/Linux 4.15.0-213-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/advantage\n\n  System load:  0.33              Processes:           98\n  Usage of /:   6.5% of 24.04GB   Users logged in:     0\n  Memory usage: 12%               IP address for eth0: 192.46.236.135\n  Swap usage:   0%\n\n\nThe programs included with the Ubuntu system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nUbuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by\napplicable law.\n\nroot@localhost:~# ls -la\nls -la\ntotal 28\ndrwx------  5 root root 4096 Nov  8 23:38 .\ndrwxr-xr-x 23 root root 4096 Sep  6 05:51 ..\n-rw-r--r--  1 root root 3106 Apr  9  2018 .bashrc\ndrwx------  2 root root 4096 Nov  8 23:38 .cache\ndrwx------  3 root root 4096 Nov  8 23:38 .gnupg\n-rw-r--r--  1 root root  148 Aug 17  2015 .profile\ndrwx------  2 root root 4096 Nov  8 23:36 .ssh\nroot@localhost:~# whoami\nwhoami\nroot\nroot@localhost:~# \n</code></pre>"},{"location":"faq/faq/","title":"Faq","text":""},{"location":"faq/faq/#i-am-trying-to-spawn-more-than-10-boxes-but-its-not-working","title":"I am trying to spawn more than 10 boxes but it's not working","text":"<p>Both Linode and Digitalocean allow you to make up to 10 VPS servers per account. You can open a ticket to ask them to increase your limit to 100 or possibly even more.</p>"},{"location":"faq/faq/#how-do-i-list-all-running-boxes","title":"How do I list all running boxes?","text":"<p>Just run <code>fleex ls</code></p>"},{"location":"faq/faq/#how-can-i-delete-a-box-or-a-fleet","title":"How can I delete a box or a fleet?","text":"<p>You can use the <code>fleex delete</code> subcommand.</p> <p>If you want to delete a single box, just pass its full name using the <code>-n</code> flag. Otherwise, if you want to delete a whole fleet, pass the fleet name to the same <code>-n</code> flag.</p>"},{"location":"faq/faq/#how-do-i-send-files-to-remote-boxes","title":"How do I send files to remote boxes?","text":"<p>You can use the <code>scp</code> subcommand. Run <code>fleex scp -h</code> for usage.</p>"},{"location":"faq/faq/#can-i-delete-a-box-as-soon-as-the-scan-is-done","title":"Can I delete a box as soon as the scan is done?","text":"<p>Yes, just use the <code>-d</code> flag.</p>"},{"location":"faq/faq/#i-get-this-error-terminal-make-rawinappropriate-ioctl-for-device","title":"I get this error: terminal make raw:inappropriate ioctl for device","text":"<p>If you've stumbled upon this error message, you're probably trying to run fleex inside a bash for loop. To make it work, you need to rely on the <code>script</code> utility:</p> <pre><code>while read r; do\n    script -qfc \"fleex .....\" /dev/null\ndone &lt; ./wordlist.txt\n</code></pre>"},{"location":"get-started/boxes/","title":"Boxes","text":""},{"location":"get-started/boxes/#spawning-new-boxes","title":"Spawning new boxes","text":"<p>Once you have configured everything, the real fun begins.</p> <p>To spawn a new fleet (aka, many boxes with starting with fleetname-box_id) run: <pre><code>fleex spawn -n FLEET_NAME -c FLEET_COUNT\n</code></pre> Remember that for any fleex subcommand, you can use the <code>-h</code> flag to get help regarding its usage.</p> <p>Fleex will automatically wait until all boxes are ready before exiting.</p>"},{"location":"get-started/commands/","title":"Commands","text":""},{"location":"get-started/commands/#running-distributed-commands","title":"Running distributed commands","text":"<p>When your fleet is ready, you can finally run distributed commands.</p> <p>We will start with an example command: <pre><code>fleex scan -n pwn -i /tmp/test-input -o scan-results.txt -c \"sudo /usr/bin/massdns -r /home/op/lists/resolvers.txt -t A -o S {{INPUT}} -w {{OUTPUT}}\"\n</code></pre></p> <p>This will send the <code>sudo /usr/bin/massdns -r /home/op/lists/resolvers.txt -t A -o S {{INPUT}} -w {{OUTPUT}}</code> command to all the boxes of your <code>pwn</code> fleet.</p> <p>Note that those <code>{{INPUT}}</code> and <code>{{OUTPUT}}</code> are special labels that gets adjusted accordingly for each box. Fleex will split the input file, in this case <code>/tmp/test-input</code> and send a chunk to each box.</p> <p>Once every box has finished, all output files will be downloaded to your local machine and merged automatically: the final output will be the <code>scan-results.txt</code> file, the name passed to the <code>-o</code> flag.</p>"},{"location":"get-started/config/","title":"Configuration","text":"<p>Fleex needs some configuration files to be downloaded on your local machine. To get them, see the init command here</p> <p>This will fetch the configuration files from our GitHub release and put them in your <code>$HOME/.config/fleex/</code> folder.</p> <p>The only file you need to worry about is <code>$HOME/.config/fleex/config.json</code>: open it with your favourite text editor, it will look like this:</p>"},{"location":"get-started/config/#default-configjson","title":"Default config.json","text":"<pre><code>{\n    \"settings\": {\n        \"provider\": \"linode\"\n    },\n    \"ssh_keys\": {\n        \"public_file\": \"id_rsa.pub\",\n        \"private_file\": \"id_rsa\"\n    },\n    \"providers\": {\n        \"linode\": {\n            \"token\": \"YOUR_LINODE_TOKEN\",\n            \"region\": \"eu-central\",\n            \"size\": \"g6-nanode-1\",\n            \"image\": \"private/12345678\",\n            \"port\": 2266,\n            \"username\": \"op\",\n            \"password\": \"USER_PASSWORD\"\n        },\n        \"vultr\": {\n            \"token\": \"YOUR_VULTR_TOKEN\",\n            \"region\": \"atl\",\n            \"size\": \"vc2-1c-1gb\",\n            \"image\": \"1a2b3c4d-1a2b-1a2b-1a2b-1a2b3c4d5e\",\n            \"port\": 2266,\n            \"username\": \"op\",\n            \"password\": \"USER_PASSWORD\"\n        }\n    },\n    \"custom_vms\": [\n        {\n            \"provider\": \"utm\",\n            \"instance_id\": \"i-customid2\",\n            \"public_ip\": \"1.2.3.4\",\n            \"ssh_port\": 22,\n            \"username\": \"user\",\n            \"password\": \"USER_PASSWORD\",\n            \"key_path\": \"/path/to/your/private-key.pem\",\n            \"tags\": [\n                \"test\",\n                \"production\"\n            ]\n        },\n        {\n            \"provider\": \"virtualbox\",\n            \"instance_id\": \"i-customid3\",\n            \"public_ip\": \"1.2.3.4\",\n            \"ssh_port\": 22,\n            \"username\": \"user\",\n            \"password\": \"USER_PASSWORD\",\n            \"key_path\": \"/path/to/your/private-key.pem\",\n            \"tags\": [\n                \"staging\"\n            ]\n        }\n    ]\n}\n</code></pre> <p>You only need to manually edit a few words here.</p> <p>First thing first, choose the provider you want to use by default and manually edit the <code>provider:</code> line accordingly. Then get your cloud provider's token from their website and put it by either replacing <code>YOUR_LINODE_TOKEN</code>. After that, save the edits to the file.</p> <p>Now you need to figure out if you already have an image on your cloud provider. An image is basically a backup of an old VPS, which might have custom tools installed. To avoid installing the same tools over and over, we recommend spawning new Fleex boxes using a custom image, rather than a default Ubuntu image.</p> <p>If you already have an image, just run <code>fleex images</code> to get a list of images, then get the image ID for the image you want to use and put it in the configuration file.</p> <p>If you don't, you need to build a new image.</p>"},{"location":"get-started/digitalocean/","title":"Digitalocean","text":""},{"location":"get-started/digitalocean/#regions","title":"Regions","text":"<ul> <li>NYC1, NYC2, NYC3: New York City, United States</li> <li>AMS2, AMS3: Amsterdam, the Netherlands</li> <li>SFO1, SFO2, SFO3: San Francisco, United States</li> <li>SGP1: Singapore</li> <li>LON1: London, United Kingdom</li> <li>FRA1: Frankfurt, Germany</li> <li>TOR1: Toronto, Canada  </li> <li>BLR1: Bangalore, India</li> </ul> Info <p>Read more here: Digitalocean regional availability matrix </p>"},{"location":"get-started/digitalocean/#sizes","title":"Sizes","text":"<ul> <li>s-1vcpu-1gb: Standard - 5$/mo</li> <li>s-1vcpu-2gb: Standard - 10$/mo </li> <li>s-1vcpu-3gb: Standard - 15$/mo</li> <li>s-2vcpu-4gb: Standard - 20$/mo</li> <li>s-4vcpu-8gb: Standard - 40$/mo </li> <li>s-6vcpu-16gb: Standard - 80$/mo </li> <li>s-8vcpu-32gb: Standard - 160$/mo </li> <li>...</li> <li>...</li> </ul> Info <p>Read more here: Digitalocean droplet plan</p>"},{"location":"get-started/images/","title":"Images","text":""},{"location":"get-started/images/#building-an-image","title":"Building an image","text":"<p>Fleex takes care of creating a new image if you need one. It will install tools that are usually needed by infosec researchers/bug bounty hunters. If you want to edit the tools that will be installed, manually edit the <code>~/fleex/build/common.yaml</code> file before proceeding.</p> <p>Now, to actually start the building process, simply run: <pre><code>fleex build\n</code></pre></p> <p>This will take some time, around 20 minutes on average. The good news is that you will only have to do this once for every cloud provider you wish to use.</p> <p>When it's done, run <code>fleex images</code>, get the image id and manually put it into the configuration file, then save it.</p>"},{"location":"get-started/install/","title":"Installation","text":""},{"location":"get-started/install/#installation","title":"Installation","text":"<p>Fleex is written in Go, so you can easily install it with the following command:</p> <pre><code>go install github.com/FleexSecurity/fleex@latest\n</code></pre> <p>Don't forget to set the <code>GOPATH</code> environment variable if you want to run fleex from any folder. </p> <pre><code>fleex --help\n</code></pre> <pre><code>\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\n\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557   \u255a\u2588\u2588\u2588\u2554\u255d \n\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u255d   \u2588\u2588\u2554\u2588\u2588\u2557 \n\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d \u2588\u2588\u2557\n\u255a\u2550\u255d     \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\n\nDistributed computing using Linode boxes.\nCheck out our docs at https://fleexsecurity.github.io/fleex-docs/\n\nUsage:\n  fleex [command]\n\nAvailable Commands:\n  delete      Delete an existing fleet or even a single box\n  help        Help about any command\n  images      Show image options\n  init        Fleex initialization command. Run this the first time.\n  ls          List running boxes\n  run         Send a command to a fleet\n  scan        Send a command to a fleet, but also with files upload &amp; chunks splitting\n  scp         Send a file/folder to a fleet using SCP\n  spawn       Spawn a fleet or even a single box\n  ssh         Start SSH terminal for a box\n\nFlags:\n      --config string     config file\n  -h, --help              help for fleex\n  -l, --loglevel string   Set log level. Available: debug, info, warn, error, fatal (default \"info\")\n      --proxy string      HTTP Proxy (Useful for debugging. Example: http://127.0.0.1:8080)\n  -t, --toggle            Help message for toggle\n\nUse \"fleex [command] --help\" for more information about a command.\n</code></pre>"},{"location":"get-started/linode/","title":"linode","text":""},{"location":"get-started/linode/#regions","title":"Regions","text":"<ul> <li>eu-central: Frankfurt, DE</li> <li>eu-west: London, UK</li> <li>us-southeast: Atlanta, GA</li> <li>us-central: Dalas, TX     </li> <li>us-west: Fremont, CA   </li> <li>us-east: Newark, NJ    </li> <li>ca-central: Toronto, ON   </li> <li>ap-south: Singapore, SG </li> <li>ap-northeast: Tokyo 2, JP   </li> <li>ap-west: Mumbai, IN    </li> <li>ap-southeast: Sydney, AU</li> </ul> Info <p>Read more here: Linode API</p>"},{"location":"get-started/linode/#sizes","title":"Sizes","text":"<ul> <li>g6-nanode-1: Nanode 1GB - 5$/mo, 0.0075$/hr </li> <li>g6-standard-1: Linode 2GB - 10$/mo, 0.015$/hr </li> <li>g6-standard-2: Linode 4GB - 20$/mo, 0.03$/hr </li> <li>g6-standard-4: Linode 8GB - 40$/mo, 0.06$/hr </li> <li>g6-standard-6: Linode 16GB - 80$/mo, 0.12$/hr </li> <li>g6-standard-8: Linode 32GB - 160$/mo, 0.24$/hr </li> <li>g6-standard-16: Linode 64GB - 320$/mo, 0.48$/hr </li> <li>g6-standard-20: Linode 96GB - 480$/mo, 0.72$/hr</li> <li>...</li> <li>...</li> </ul> Info <p>Read more here: Linode API</p>"}]}